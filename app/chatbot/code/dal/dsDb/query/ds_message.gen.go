// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"start-feishubot/model"
)

func newDsMessage(db *gorm.DB, opts ...gen.DOOption) dsMessage {
	_dsMessage := dsMessage{}

	_dsMessage.dsMessageDo.UseDB(db, opts...)
	_dsMessage.dsMessageDo.UseModel(&model.DsMessage{})

	tableName := _dsMessage.dsMessageDo.TableName()
	_dsMessage.ALL = field.NewAsterisk(tableName)
	_dsMessage.ID = field.NewInt64(tableName, "id")
	_dsMessage.AppID = field.NewString(tableName, "app_id")
	_dsMessage.TenantID = field.NewString(tableName, "tenant_id")
	_dsMessage.UnionID = field.NewString(tableName, "union_id")
	_dsMessage.UserID = field.NewString(tableName, "user_id")
	_dsMessage.SendType = field.NewString(tableName, "send_type")
	_dsMessage.MessageID = field.NewString(tableName, "message_id")
	_dsMessage.RootID = field.NewString(tableName, "root_id")
	_dsMessage.ParentID = field.NewString(tableName, "parent_id")
	_dsMessage.ChatID = field.NewString(tableName, "chat_id")
	_dsMessage.ChatType = field.NewString(tableName, "chat_type")
	_dsMessage.Content = field.NewString(tableName, "content")
	_dsMessage.EventJSON = field.NewString(tableName, "event_json")
	_dsMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_dsMessage.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dsMessage.fillFieldMap()

	return _dsMessage
}

type dsMessage struct {
	dsMessageDo dsMessageDo

	ALL       field.Asterisk
	ID        field.Int64
	AppID     field.String
	TenantID  field.String
	UnionID   field.String
	UserID    field.String
	SendType  field.String
	MessageID field.String
	RootID    field.String
	ParentID  field.String
	ChatID    field.String
	ChatType  field.String
	Content   field.String
	EventJSON field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d dsMessage) Table(newTableName string) *dsMessage {
	d.dsMessageDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dsMessage) As(alias string) *dsMessage {
	d.dsMessageDo.DO = *(d.dsMessageDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dsMessage) updateTableName(table string) *dsMessage {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.AppID = field.NewString(table, "app_id")
	d.TenantID = field.NewString(table, "tenant_id")
	d.UnionID = field.NewString(table, "union_id")
	d.UserID = field.NewString(table, "user_id")
	d.SendType = field.NewString(table, "send_type")
	d.MessageID = field.NewString(table, "message_id")
	d.RootID = field.NewString(table, "root_id")
	d.ParentID = field.NewString(table, "parent_id")
	d.ChatID = field.NewString(table, "chat_id")
	d.ChatType = field.NewString(table, "chat_type")
	d.Content = field.NewString(table, "content")
	d.EventJSON = field.NewString(table, "event_json")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dsMessage) WithContext(ctx context.Context) *dsMessageDo {
	return d.dsMessageDo.WithContext(ctx)
}

func (d dsMessage) TableName() string { return d.dsMessageDo.TableName() }

func (d dsMessage) Alias() string { return d.dsMessageDo.Alias() }

func (d dsMessage) Columns(cols ...field.Expr) gen.Columns { return d.dsMessageDo.Columns(cols...) }

func (d *dsMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dsMessage) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["id"] = d.ID
	d.fieldMap["app_id"] = d.AppID
	d.fieldMap["tenant_id"] = d.TenantID
	d.fieldMap["union_id"] = d.UnionID
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["send_type"] = d.SendType
	d.fieldMap["message_id"] = d.MessageID
	d.fieldMap["root_id"] = d.RootID
	d.fieldMap["parent_id"] = d.ParentID
	d.fieldMap["chat_id"] = d.ChatID
	d.fieldMap["chat_type"] = d.ChatType
	d.fieldMap["content"] = d.Content
	d.fieldMap["event_json"] = d.EventJSON
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dsMessage) clone(db *gorm.DB) dsMessage {
	d.dsMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dsMessage) replaceDB(db *gorm.DB) dsMessage {
	d.dsMessageDo.ReplaceDB(db)
	return d
}

type dsMessageDo struct{ gen.DO }

func (d dsMessageDo) Debug() *dsMessageDo {
	return d.withDO(d.DO.Debug())
}

func (d dsMessageDo) WithContext(ctx context.Context) *dsMessageDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dsMessageDo) ReadDB() *dsMessageDo {
	return d.Clauses(dbresolver.Read)
}

func (d dsMessageDo) WriteDB() *dsMessageDo {
	return d.Clauses(dbresolver.Write)
}

func (d dsMessageDo) Session(config *gorm.Session) *dsMessageDo {
	return d.withDO(d.DO.Session(config))
}

func (d dsMessageDo) Clauses(conds ...clause.Expression) *dsMessageDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dsMessageDo) Returning(value interface{}, columns ...string) *dsMessageDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dsMessageDo) Not(conds ...gen.Condition) *dsMessageDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dsMessageDo) Or(conds ...gen.Condition) *dsMessageDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dsMessageDo) Select(conds ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dsMessageDo) Where(conds ...gen.Condition) *dsMessageDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dsMessageDo) Order(conds ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dsMessageDo) Distinct(cols ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dsMessageDo) Omit(cols ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dsMessageDo) Join(table schema.Tabler, on ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dsMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dsMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dsMessageDo) Group(cols ...field.Expr) *dsMessageDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dsMessageDo) Having(conds ...gen.Condition) *dsMessageDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dsMessageDo) Limit(limit int) *dsMessageDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dsMessageDo) Offset(offset int) *dsMessageDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dsMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dsMessageDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dsMessageDo) Unscoped() *dsMessageDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dsMessageDo) Create(values ...*model.DsMessage) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dsMessageDo) CreateInBatches(values []*model.DsMessage, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: dsDb.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dsMessageDo) Save(values ...*model.DsMessage) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dsMessageDo) First() (*model.DsMessage, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DsMessage), nil
	}
}

func (d dsMessageDo) Take() (*model.DsMessage, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DsMessage), nil
	}
}

func (d dsMessageDo) Last() (*model.DsMessage, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DsMessage), nil
	}
}

func (d dsMessageDo) Find() ([]*model.DsMessage, error) {
	result, err := d.DO.Find()
	return result.([]*model.DsMessage), err
}

func (d dsMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DsMessage, err error) {
	buf := make([]*model.DsMessage, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dsMessageDo) FindInBatches(result *[]*model.DsMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dsMessageDo) Attrs(attrs ...field.AssignExpr) *dsMessageDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dsMessageDo) Assign(attrs ...field.AssignExpr) *dsMessageDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dsMessageDo) Joins(fields ...field.RelationField) *dsMessageDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dsMessageDo) Preload(fields ...field.RelationField) *dsMessageDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dsMessageDo) FirstOrInit() (*model.DsMessage, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DsMessage), nil
	}
}

func (d dsMessageDo) FirstOrCreate() (*model.DsMessage, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DsMessage), nil
	}
}

func (d dsMessageDo) FindByPage(offset int, limit int) (result []*model.DsMessage, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dsMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dsMessageDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dsMessageDo) Delete(models ...*model.DsMessage) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dsMessageDo) withDO(do gen.Dao) *dsMessageDo {
	d.DO = *do.(*gen.DO)
	return d
}
